
fullnameOverride: elmabot
global:
## настройки интеграции с elma365
#   elma365Integration:
# ## параметры ingress elma365
#     ingress:
#       annotations:
#         application.elma365.com: elma365-bot
#         cert-manager.io/cluster-issuer: letsencrypt-prod
#       ingressClassName: "nginx"
# ## пароль для авторизации сервисов через hydra
#     clientSecret: wvmtLu1KAvf8XjtULBFJ3DP0eB
# ## адрес elma365
#     elma365Uri: sd.1221systems.ru
# ## секрет с сертификатом для домена elma365
#     elma365TlsSecret: elma365-tls
  storage:
## sharedPVC: true Если есть возможность использовать общий RWX диск для экономии места.
    sharedPVC: true
    storageClassName: "csi-s3"
    storageSize: 8Gi
    pvcName: elmabot
    tag: "0.0.2"
## offlineDataPath: путь, где лежат файлы моделей после скачивания скриптом
    offlineDataPath: "$HOME/offline-files/elma-bot-1.10.1/data"

## название конфигмапа с доверенным сертификатом для всех сервисов бота
## TODO: может потребоваться отдельный сертификат для 365
## сейчас этот сертификат монтируется в контейнеры, которые обращаются к другим сервисам по https.
## для создания используйте команду вида:
## kubectl create configmap elma-bot-root-ca --from-file=elma-bot-cert.crt=my-CA-cert.crt
## my-CA-cert.crt - имя файла вашего сертификата.
## elma-bot-cert.crt - имя файла в конейнерах, остается как есть.
##  tlsCAConfigMapName: elma-bot-root-ca

## зарегистрированное доменное имя
  host: sd.1221systems.ru
## true если предполагается использование в закрытом контуре
  useInPrivateNetwork: false
  image:
    pullPolicy: IfNotPresent
    pullSecret:
      - elmabot-regsecret
    # заменить на адрес локального репозитория при установке в закрытом контуре
    repository: cr.yandex/crph9k6gr6scu5er72ha
  ingress:
    annotations:
      application.elma365.com: elma365-bot
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/proxy-body-size: 2g
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://{{ .Values.global.routing.base.domain }}{{ .Values.global.host }},https://client.{{ .Values.global.host }},https://elma365.{{ .Values.global.host }},https://auth.{{ .Values.global.host }},https://designer.{{ .Values.global.host }},https://admin.{{ .Values.global.host }},https://kb.{{ .Values.global.host }}"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, PATCH, DELETE"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,x-ms-bot-agent"
## ssl сертификат
    existingTLSSecret: elma365-tls
    ingressClassName: nginx
## глобальные настройки для всех сервисов
  env: {}
  channels:
    supportWidget:
      # ИД Support Widget бота, который будет подключен к чату, интегрированному в интерфейс bot-manager
      # (значение можно посмотреть в скрипте в настройках интеграции канала livechat)
      agentStageAccountId: ""
  inbox:
    # true если необходимо включить режим inbox
    enabled: false
  deployment:
    readinessProbe:
      initialDelaySeconds: 60
      periodSeconds: 30
      timeoutSeconds: 30
      failureThreshold: 5
    livenessProbe:
      initialDelaySeconds: 60
      periodSeconds: 30
      timeoutSeconds: 30
      failureThreshold: 5
  routing:
    # Режим маршрутизации:
    # - DOMAIN - Каждый публичный сервис располагается на отдельном суб-домене (client.example.com, auth.example.com и т.д.)
    mode: PATH
    # - PATH - Каждый публичный сервис располагается на отдельном суб-пути (example.com/client, example.com/auth и т.д.)
    base:
      # Дополнительный базовый суб-домен:
      # - В режиме DOMAIN - client.bot.example.com, auth.bot.example.com и т.д.
      # - В режиме PATH - bot.example.com/client, bot.example.com/auth и т.д.
      # Обязательно использовать только в том случае, если выполняются следующие условия:
      # - Хост у ELMA365 и ELMA Bot одинаковый (global.host == global.elma365Integration.elma365Uri).
      # - Используется режим PATH.
      # Пример: "bot." - точка в конце обязательна.
      domain: "bot."
      # Дополнительный базовый суб-путь:
      # - В режиме DOMAIN - client.example.com/bot, auth.example.com/bot и т.д.
      # - В режиме PATH - example.com/bot/client, example.com/bot/auth и т.д.
      # Желательно использовать только в том случае, если выполняются следующие условия:
      # - Хост у ELMA365 и ELMA Bot одинаковый (global.host == global.elma365Integration.elma365Uri).
      # - Используется режим PATH.
      # - global.base.domain не используется.
      # Пример: "/bot" - слеш в начале обязателен.
      path: "/bot"

  diagnostic:
  # Вывод в лог значений переменных окружения при старте сервисов.
    environmentVariablesLogger:
      # если false, то не выводятся никакие значения.
      enabled: true
      # Переменные окружения с этими подстроками в названии не должны выводиться в лог. Case sensitive.
      ignoredKeywords: "_HOST,_PORT"
      # Значения переменных окружения с этими подстроками в названии должны маскироваться
      # при выводе значения в лог. Not case sensitive.
      sensitiveKeywords: "access,password,secret,connection_string,connectionString"

## требования к паролям пользователей
userPasswordOptions:
  requireNonAlphanumeric: false
  requireLowercase: true
  requireUppercase: true
  requireDigit: true

## пароли пользователей по умолчанию
defaultUserPasswords:
  admin: 123Qwerty!
  employee: 123Qwerty!
  owner: 123Qwerty!
  system: 123Qwerty!

db:
## строки подключения (сonnection strings) для подключения к БД
## cтрока подключения к БД MongoDB для приложения, формат: mongodb://user:password@hostname:27017/databaseName
  mongoUrl: ''
## cтрока подключения к Rabbit, формат amqp://user:password@hostname:5672/vhost
  amqpUrl: amqp://elma365:rmqpassword@rabbitmq:5672/elma365
## cтрока подключения к Redis, формат: host:port
  redisUrl: redis://redis:6379
## cтрока подключения elasticsearch
  elasticsearchUrl: http://elasticsearch:9200
  postgresUrl: ''
## настройки подключения к S3
  s3:
    # поставщик хранилища:
    # - MINIO - при использовании MinIO - https://min.io/
    # - CLOUD - при использовании облака (Yandex, Amazon и т.д.)
    provider: CLOUD
    # адрес хранилища, например, http://minio:80 или https://storage.yandexcloud.net
    url: https://storage.yandexcloud.net
    accesskeyid: 
    secretaccesskey: 
    # регион сервера S3, например, "us-east-1" или "ru-central-1". Стандартный регион — "us-east-1".
    region: "ru-central1"
    # true, если соединение с Minio по https
    ssl: true
    buckets:
      omegaModels: 1221elmabot-omega-models
      botStaticFiles: 1221elmabot-bot-static-files
      botTemporaryFiles: 1221elmabot-bot-temporary-files
      analyticsReportFiles: 1221elmabot-analytics-report-files
      conversationExportFiles: 1221elmabot-conversation-export-files
      botInboxFiles: 1221elmabot-bot-inbox-files
      avatarFiles: 1221elmabot-avatar-files

mail:
## настройки подключения к почтовому серверу.
  host: owa.1221systems.ru
  port: 587
  username: sd@1221systems.ru
  password: 
  ssl: true
  smtp:
    host: "owa.1221systems.ru"
    port: "587"
    from: "sd@1221systems.ru"
    user: "sd"
    password: ""
    needTLS: true

hydra:
  enabled: false # Должно быть true для интеграции с elma365
  ## hydra:
  ##   dangerousForceHttp: true
  ##   autoMigrate: true
  ## config:
  ##   existingSecret: hydra
  ## job:
  ##   annotations:
  ##     linkerd.io/inject: disabled
  ##   labels:
  ##     sidecar.istio.io/inject: "false"
  ## hydraInit:
  ##   endpoint: "http://hydra-admin:4445"
  ##   id: "elma_bot_oidc"

#Настройка дополнительных лейблов и аннотаций для job pods
job:
  annotations:
    linkerd.io/inject: disabled
  labels:
    sidecar.istio.io/inject: "false"

